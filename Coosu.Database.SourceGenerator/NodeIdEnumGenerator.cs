using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System.Collections.Generic;
using System.Text;

namespace Coosu.Database.SourceGenerator
{
    [Generator]
    public class NodeIdEnumGenerator : ISourceGenerator
    {
        public void Initialize(GeneratorInitializationContext context)
        {
            // No specific initialization needed for this simple version.
            // For more complex scenarios, one might register for syntax notifications here.
        }

        public void Execute(GeneratorExecutionContext context)
        {
            // The NodeIds here are based on the values directly used in
            // Coosu.Database.Serialization.OsuDbReaderOsuDbExtensions.FillProperty
            // This ensures that the generated enum can be used to replace those
            // magic numbers without changing behavior.

            var enumBuilder = new StringBuilder();
            enumBuilder.AppendLine("// <auto-generated/>");
            enumBuilder.AppendLine("namespace Coosu.Database.Generated {");
            enumBuilder.AppendLine("    public enum NodeId {");

            enumBuilder.AppendLine("        BeatmapStruct = 8,");
            // Beatmap Properties (NodeIds as used in FillProperty and its callees)
            // These values are derived from the conditional checks (reader.NodeId == X)
            // in OsuDbReaderOsuDbExtensions.cs
            enumBuilder.AppendLine("        Artist = 9,");
            enumBuilder.AppendLine("        ArtistUnicode = 10,");
            enumBuilder.AppendLine("        Title = 11,");
            enumBuilder.AppendLine("        TitleUnicode = 12,");
            enumBuilder.AppendLine("        Creator = 13,");
            enumBuilder.AppendLine("        Difficulty = 14,");
            enumBuilder.AppendLine("        AudioFileName = 15,");
            enumBuilder.AppendLine("        Md5Hash = 16,");
            enumBuilder.AppendLine("        FileName = 17,");
            enumBuilder.AppendLine("        RankedStatus = 18,");
            enumBuilder.AppendLine("        CirclesCount = 19,");
            enumBuilder.AppendLine("        SlidersCount = 20,");
            enumBuilder.AppendLine("        SpinnersCount = 21,");
            enumBuilder.AppendLine("        LastModified = 22,");
            enumBuilder.AppendLine("        ApproachRate = 23,");
            enumBuilder.AppendLine("        CircleSize = 24,");
            enumBuilder.AppendLine("        HpDrain = 25,");
            enumBuilder.AppendLine("        OverallDifficulty = 26,");
            enumBuilder.AppendLine("        SliderVelocity = 27,");
            // NodeId 28 would be StarRatingStdCount (length member)
            enumBuilder.AppendLine("        StarRatingStdCount = 28,");
            enumBuilder.AppendLine("        StarRatingStdArray = 29, // ArrayStructure NodeId for StarRatingStd");
            // NodeId 30 would be the PropertyStructure NodeId for items within StarRatingStd
            enumBuilder.AppendLine("        StarRatingStdStruct = 30, // ArrayStructure NodeId for StarRatingStd");
            // NodeId 31 would be StarRatingTaikoCount (length member)
            enumBuilder.AppendLine("        StarRatingTaikoCount = 31,");
            enumBuilder.AppendLine("        StarRatingTaikoArray = 32, // ArrayStructure NodeId for StarRatingTaiko");
            // NodeId 33 would be for items within StarRatingTaiko
            enumBuilder.AppendLine("        StarRatingTaikoStruct = 33, // ArrayStructure NodeId for StarRatingStd");
            // NodeId 34 would be StarRatingCtbCount (length member)
            enumBuilder.AppendLine("        StarRatingCtbCount = 34,");
            enumBuilder.AppendLine("        StarRatingCtbArray = 35, // ArrayStructure NodeId for StarRatingCtb");
            // NodeId 36 would be for items within StarRatingCtb
            enumBuilder.AppendLine("        StarRatingCtbStruct = 36, // ArrayStructure NodeId for StarRatingStd");
            // NodeId 37 would be StarRatingManiaCount (length member)
            enumBuilder.AppendLine("        StarRatingManiaCount = 37,");
            enumBuilder.AppendLine("        StarRatingManiaArray = 38, // ArrayStructure NodeId for StarRatingMania");
            // NodeId 39 would be for items within StarRatingMania
            enumBuilder.AppendLine("        StarRatingManiaStruct = 39,");
            enumBuilder.AppendLine("        DrainTime = 40,");
            enumBuilder.AppendLine("        TotalTime = 41,");
            enumBuilder.AppendLine("        AudioPreviewTime = 42,");
            enumBuilder.AppendLine("        TimingPointCount = 43, // NodeId for the property holding the count for TimingPoints array");
            enumBuilder.AppendLine("        TimingPointArray = 44, // ArrayStructure NodeId for TimingPoints");
            // NodeId 45 would be the PropertyStructure NodeId for items within TimingPoints
            enumBuilder.AppendLine("        TimingPointStruct = 45, // ArrayStructure NodeId for TimingPoints");
            enumBuilder.AppendLine("        BeatmapId = 46,");
            enumBuilder.AppendLine("        BeatmapSetId = 47,");
            enumBuilder.AppendLine("        ThreadId = 48,");
            enumBuilder.AppendLine("        GradeStandard = 49,");
            enumBuilder.AppendLine("        GradeTaiko = 50,");
            enumBuilder.AppendLine("        GradeCtb = 51,");
            enumBuilder.AppendLine("        GradeMania = 52,");
            enumBuilder.AppendLine("        LocalOffset = 53,");
            enumBuilder.AppendLine("        StackLeniency = 54,");
            enumBuilder.AppendLine("        GameMode = 55,");
            enumBuilder.AppendLine("        Source = 56,");
            enumBuilder.AppendLine("        Tags = 57,");
            enumBuilder.AppendLine("        OnlineOffset = 58,");
            enumBuilder.AppendLine("        TitleFont = 59,");
            enumBuilder.AppendLine("        IsUnplayed = 60,");
            enumBuilder.AppendLine("        LastPlayed = 61,");
            enumBuilder.AppendLine("        IsOsz2 = 62,");
            enumBuilder.AppendLine("        FolderName = 63,");
            enumBuilder.AppendLine("        LastTimeChecked = 64,");
            enumBuilder.AppendLine("        IsSoundIgnored = 65,");
            enumBuilder.AppendLine("        IsSkinIgnored = 66,");
            enumBuilder.AppendLine("        IsStoryboardDisabled = 67,");
            enumBuilder.AppendLine("        IsVideoDisabled = 68,");
            enumBuilder.AppendLine("        IsVisualOverride = 69,");
            // NodeId 70 (likely LastModification, an internal property)
            enumBuilder.AppendLine("        LastModification = 70,");
            enumBuilder.AppendLine("        ManiaScrollSpeed = 71,");

            // It's also useful to have NodeIds for OsuDb direct properties if they were to be used similarly
            // Based on StructureHelper trace:
            // ObjectStructure for OsuDb itself is NodeId 0
            enumBuilder.AppendLine("        // OsuDb Properties");
            enumBuilder.AppendLine("        OsuDb = 0,");
            enumBuilder.AppendLine("        OsuDb_OsuVersion = 1,");
            enumBuilder.AppendLine("        OsuDb_FolderCount = 2,");
            enumBuilder.AppendLine("        OsuDb_AccountUnlocked = 3,");
            enumBuilder.AppendLine("        OsuDb_UnlockDate = 4,");
            enumBuilder.AppendLine("        OsuDb_PlayerName = 5,");
            enumBuilder.AppendLine("        OsuDb_BeatmapCount = 6, // Length member for Beatmaps array");
            enumBuilder.AppendLine("        OsuDb_BeatmapArray = 7,     // ArrayStructure NodeId for Beatmaps");
            enumBuilder.AppendLine("        OsuDb_Permissions = 72,");
            // ObjectStructure for Beatmap items within OsuDb_Beatmaps is NodeId 8
            // Then Beatmap properties start from 9 (Artist = 9 etc.)

            // Permissions would be after Beatmaps array processing.
            // If Permissions is the next direct property of OsuDb after Beatmaps:
            // LastId after Beatmap.ManiaScrollSpeed (PropNodeId 69+8 = 77) was 77+1 = 78.
            // enumBuilder.AppendLine("        OsuDb_Permissions = 78,"); // Assuming it's a simple property next. This needs verification.
            // For now, focus on Beatmap properties as they are explicitly used with NodeIds in extensions.

            enumBuilder.AppendLine("    }");
            enumBuilder.AppendLine("}");

            context.AddSource("NodeIdEnum.g.cs", SourceText.From(enumBuilder.ToString(), Encoding.UTF8));
        }

        // SyntaxReceiver can be used to collect information about classes and members
        // if the generator needs to analyze existing code to determine NodeIds dynamically.
        // For this initial version that hardcodes NodeIds, it's not strictly necessary
        // but is included as a placeholder for future enhancements.
        // private class SyntaxReceiver : ISyntaxReceiver
        // {
        //     public List<ClassDeclarationSyntax> CandidateClasses { get; } = new List<ClassDeclarationSyntax>();
        // 
        //     public void OnVisitSyntaxNode(SyntaxNode syntaxNode)
        //     {
        //         if (syntaxNode is ClassDeclarationSyntax classDeclarationSyntax)
        //         {
        //             // Potentially filter for classes like OsuDb, Beatmap, etc.
        //             // CandidateClasses.Add(classDeclarationSyntax);
        //         }
        //     }
        // }
    }
}